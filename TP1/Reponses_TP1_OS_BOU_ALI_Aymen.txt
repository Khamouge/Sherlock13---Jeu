TP1 BOU ALI Aymen OS User

------------------------ Création de processus avec fork ------------------------

	1 - Quels sont les paramètres de fork ?

L'appel système fork n'a besoin d'aucun paramètre pour être éxécuté. pid_t fork(void);


	2 - Que contient la valeur de retour de fork ?

fork retourne en soi deux valeurs, une chez le parent qui comprend le PID* de l'enfant lui-même différent du PID du parent et fork retourne aussi 0 chez l'enfant.
Si une erreur survient, fork retourne une valeur négative et ne crée pas d'enfant.

*PID : Process ID


	3 - Expliquer pourquoi l’appel système fork rend DEUX valeurs de retour.

Le PID de l'enfant et du parent ne doivent pas être les mêmes. En effet, cela causera des problèmes dans la table des processus si cela à être le cas. Pour cela, fork donne à l'enfant une valeur, et donne également une valeur de retour au parent avec le PID de l'enfant.


	4 - En prenant l’exemple d’une application USER qui débute son tick système (donc il lui reste beaucoup de temps pour faire des choses) et qui fait un appel système fork, expliquer en détail ce qui se passe dans le système.

De façon simple, plusieurs fonctions existent pour connaître certaines informations de la table des processus :

	- getpid() : Qui permet d'obtenir le PID du processus en cours d'éxécution.
	
	- waitpid(PID_Enfant, &statut, option) : Bloque le processus parent jusqu'à que le processus enfant change d'état via la mort du processus enfant avec exit(0).
	
	- exit(0) : Tue le processus enfant mais ne le supprime pas de la mémoire. On peut retrouver son "cadavre" (glauque de fou) en bloquant le processus parent et en faisant "ps -a" dans le terminal.
	
	- kill(PID_Enfant, SIGTERM) : Nettoie le "cadavre" de l'enfant.
	
	- execve(const char *pathname, char *const argv[], char *const envp[]) : Permet de charger un nouveau programme en mémoire et remplace le processus en cours par le programme chargé.
	
	- fork() : Renvoie 0 si un processus enfant est créé. Renvoie une autre valeur positive s'il n'y a que le processus parent. Renvoie une valer négative si une erreur survient.



Lorsqu'on lance fork1, on observe deux valeurs sans forcément comprendre la différence entre les deux même si la réponse est plutôt simple. En réalité, lorsqu'on lance l'appel système fork, un processus enfant est créé et exécute le code en lui-même. En même temps, le processus parent fait son exécution du code.

Cette distinction est claire dans fork2.c

Par contre, dans fork3.c, le processus parent est bloqué avec le scanf tant que l'utilisateur ne rentre pas de valeur. Pendant ce temps là, le processus enfant exécute le programme en rentrant dans la condition (p == 0) et meurt. Comme le scanf est encore en cours d'exécution, le parent ne peut pas finir le travail de nettoyer le cadavre de l'enfant (c'est horrible de dire ça).
On peut donc via la commande "ps -a" dans un terminal, voir le corps inerte de l'enfant au sol (ajout de "defunct" devant le nom du processus).


------------------------ Création de processus avec minishell ------------------------

La fonction mini1.c permet de sauvegarder la commande entrer par l'utilisateur. Evidemment, la commande n'est ici pas exécutée, ce qui n'est pas le cas dans mini2.c.



------------------------ File Description - fd ------------------------


fd signifie file description.

















